name: ci

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

permissions:
  contents: read

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:

  lint:
    runs-on: ubuntu-latest
    strategy: &py-strategy
      fail-fast: false
      matrix:
        include:
          - python-version: "3.8"
          - python-version: "3.9"
          - python-version: "3.10"
          - python-version: "3.11"
          - python-version: "3.12"
          - python-version: "3.13"
          - python-version: "3.14.0-rc.1"
            allow-prereleases: true
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          allow-prereleases: ${{ matrix.allow-prereleases || false }}

      - name: Install uv
        run: pipx install uv

      - name: Cache uv
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
          key: uv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('uv.lock') }}

      - name: Sync dev deps
        run: uv sync --extra dev

      - name: Ruff (lint)
        run: uv run ruff check .

      - name: Ruff (format check)
        run: uv run ruff format --check .

  anima:
    runs-on: ubuntu-latest
    strategy: *py-strategy
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        run: pipx install uv

      - name: Cache uv
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: uv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('uv.lock') }}

      - name: Sync dev deps
        run: uv sync --extra dev

      # --- Reports (declared & installed) ---
      - name: Generate AnimaDao reports
        run: |
          REPORT_DIR="${RUNNER_TEMP}/anima"
          mkdir -p "$REPORT_DIR"
          # Declared
          uv run animadao report --project . --src . --format json --out "$REPORT_DIR/declared.json"
          uv run animadao report --project . --src . --format md   --out "$REPORT_DIR/declared.md"
          uv run animadao report --project . --src . --format html --out "$REPORT_DIR/declared.html"
          # Installed
          uv run animadao report --project . --src . --mode installed --format json --out "$REPORT_DIR/installed.json"
          uv run animadao report --project . --src . --mode installed --format md   --out "$REPORT_DIR/installed.md"
          uv run animadao report --project . --src . --mode installed --format html --out "$REPORT_DIR/installed.html"
          echo "REPORT_DIR=$REPORT_DIR" >> "$GITHUB_ENV"

      - name: Append AnimaDao report to Job Summary (Python ${{ matrix.python-version }})
        if: always()
        run: |
          {
            echo "## AnimaDao â€” declared (Python ${{ matrix.python-version }})"
            echo
            cat "$REPORT_DIR/declared.md"
            echo
            echo "<details><summary>Raw JSON</summary>"
            echo
            echo '```json'
            cat "$REPORT_DIR/declared.json"
            echo '```'
            echo "</details>"
            echo
            echo "---"
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Upload AnimaDao reports artifact
        uses: actions/upload-artifact@v4
        with:
          name: anima-reports-${{ matrix.python-version }}
          path: ${{ env.REPORT_DIR }}
          if-no-files-found: error
          retention-days: 7

      # --- Strict gates (can fail the job) ---
      - name: AnimaDao gate (declared)
        run: |
          uv run animadao-pre-commit-gate \
            --mode declared \
            --fail-if-outdated \
            --max-unused 0 \
            --ignore pip --ignore setuptools --ignore wheel --ignore ruff

      - name: AnimaDao gate (installed)
        run: |
          uv run animadao-pre-commit-gate \
            --mode installed \
            --fail-if-outdated

  test:
    runs-on: ubuntu-latest
    strategy: *py-strategy
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        run: pipx install uv

      - name: Cache uv global cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
          key: uv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('uv.lock') }}

      - name: Sync deps (dev extras)
        run: uv sync --extra dev

      - name: Run tests
        run: uv run pytest

  install-from-wheel:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: pipx install uv
      - run: uv sync --extra dev
      - run: uv run python -m build --sdist --wheel
      - name: Install wheel in clean venv and smoke-test CLI
        run: |
          python -m venv .venv_check
          . .venv_check/bin/activate
          pip install dist/*.whl
          animadao --help
